{"version":3,"sources":["components/ShopHeader/index.jsx","components/Nav/index.jsx","components/Item/index.jsx","components/ShopPage/index.jsx","components/CartEmpty/index.jsx","components/CartPage/index.jsx","constants/item-data.js","components/Content/index.jsx","App.js","serviceWorker.js","index.js"],"names":["ShopHeader","className","Nav","activeTab","onTabChange","itemClass","tabName","onClick","Item","item","children","src","image","alt","name","description","price","ShopPage","items","onAddToCart","map","key","id","CartEmpty","CartPage","onPlusOne","onMinusOne","length","count","reduce","sum","Content","tab","onRemoveItem","cart","App","useState","setActiveTab","setCart","previousCart","index","findIndex","i","cartCopy","splice","groupedItems","summary","Object","values","summariseCart","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f3e4911.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ShopHeader.css';\r\n\r\nconst ShopHeader = () => {\r\n    return (\r\n        <div className=\"welcome-message\">\r\n            <h1>Welcome to the Shop</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShopHeader;","import React from 'react';\r\nimport './Nav.css';\r\n\r\nconst Nav = ({ activeTab, onTabChange }) => {\r\n    const itemClass = (tabName) => {\r\n        return `nav-item ${\r\n            activeTab === tabName ? 'selected' : ''\r\n            }`\r\n    }\r\n\r\n    return (\r\n        <nav className=\"nav\">\r\n            <ul>\r\n                <li className={itemClass('shop')}>\r\n                    <button onClick={() => onTabChange('shop')}>Shop</button>\r\n                </li>\r\n                <li className={itemClass('cart')}>\r\n                    <button onClick={() => onTabChange('cart')}>Cart</button>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './Item.css';\r\n\r\nconst Item = ({ item, children }) => {\r\n    return (\r\n        <div className=\"item\">\r\n            <div className=\"item-left-side\">\r\n                <img className=\"item-image\" src={item.image} alt={item.name} />\r\n                <div className=\"item-name\">\r\n                    {item.name}\r\n                </div>\r\n                <div className=\"item-description\">\r\n                    {item.description}\r\n                </div>\r\n            </div>\r\n            <div className=\"item-right-side\">\r\n                <div className=\"item-price\">\r\n                    £{item.price}\r\n                </div>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport './ShopPage.css';\r\nimport Item from '../Item';\r\n\r\nconst ShopPage = ({ items, onAddToCart }) => {\r\n    return (\r\n        <ul className=\"shop-page-items\">\r\n            {items.map(item =>\r\n                <li key={item.id} className=\"shop-page-item\">\r\n                    <Item item={item}>\r\n                        <button\r\n                            className=\"Item-addToCart\"\r\n                            onClick={() => onAddToCart(item)}>Add to Cart\r\n                        </button>\r\n                    </Item>\r\n                </li>\r\n            )}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default ShopPage;","import React from 'react';\r\nimport './CartEmpty.css'\r\n\r\nconst CartEmpty = () => {\r\n    return (\r\n        <div className=\"empty-cart-message\">\r\n            <h1>Your Cart is Empty</h1>\r\n            <h2>Go spend some money.</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CartEmpty;","import React from 'react';\r\nimport Item from '../Item';\r\nimport CartEmpty from '../CartEmpty';\r\nimport './CartPage.css'\r\n\r\nconst CartPage = ({ items, onPlusOne, onMinusOne }) => {\r\n    return (\r\n        items.length === 0 ? <CartEmpty /> :\r\n            <ul className=\"cart-page-items\">\r\n                {items.map(item =>\r\n                    <li key={item.id} className=\"cart-page-item\">\r\n                        <Item item={item}>\r\n                            <div className=\"cart-item-manage\">\r\n                                <button className=\"cart-item-minusone\"\r\n                                    onClick={() => onMinusOne(item)}>&#45;</button>\r\n                                <span className=\"cart-item-count\">{item.count}</span>\r\n                                <button className=\"cart-item-plusone\"\r\n                                    onClick={() => onPlusOne(item)}>&#43;</button>\r\n                            </div>\r\n                        </Item>\r\n                    </li>\r\n                )}\r\n                <li className=\"cart-page-item cart-page-total\">\r\n                    Total: £{items.reduce((sum, item) => sum + (item.price * item.count), 0)}\r\n                </li>\r\n            </ul>\r\n    )\r\n}\r\n\r\n\r\nexport default CartPage;","let items = [\r\n    {\r\n        id: 0,\r\n        name: \"Item One\",\r\n        description: \"An item I haven't yet determined on.\",\r\n        price: 329.00,\r\n        image: \"\"\r\n    },\r\n    {\r\n        id: 1,\r\n        name: \"Item two\",\r\n        description: \"An item I haven't yet determined on either.\",\r\n        price: 799.00,\r\n        image: \"\"\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Item three\",\r\n        description: \"An item I still haven't yet determined on.\",\r\n        price: 749.99,\r\n        image: \"\"\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Item four\",\r\n        description: \"Still haven't decided what this will be.\",\r\n        price: 749.99,\r\n        image: \"\"\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Item five\",\r\n        description: \"I should get on with stocking the shop.\",\r\n        price: 749.99,\r\n        image: \"\"\r\n    }\r\n];\r\nexport default items;","import React from 'react';\r\nimport ShopPage from '../ShopPage';\r\nimport CartPage from '../CartPage';\r\nimport items from '../../constants/item-data';\r\n\r\nconst Content = ({ tab, onAddToCart, onRemoveItem, cart }) => {\r\n\r\n\r\n    switch (tab) {\r\n        default:\r\n        case 'shop':\r\n            return <ShopPage items={items} onAddToCart={onAddToCart} />;\r\n        case 'cart':\r\n            return <CartPage items={cart} onPlusOne={onAddToCart} onMinusOne={onRemoveItem} />\r\n    }\r\n};\r\n\r\nexport default Content;\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport ShopHeader from './components/ShopHeader';\nimport Nav from './components/Nav';\nimport Content from './components/Content';\n\nconst App = () => {\n\n  const [activeTab, setActiveTab] = useState('shop');\n\n  const [cart, setCart] = useState([]);\n\n  const addToCart = (item) => {\n    setCart(previousCart => [...previousCart, item]);\n  };\n\n  const summariseCart = cart => {\n    const groupedItems = cart.reduce((summary, item) => {\n      summary[item.id] = summary[item.id] || {\n        ...item,\n        count: 0\n      };\n      summary[item.id].count++;\n      return summary;\n    }, {});\n    return Object.values(groupedItems);\n  };\n\n  const removeItem = (item) => {\n    let index = cart.findIndex(i => i.id === item.id);\n    if (index >= 0) {\n      setCart(cart => {\n        const cartCopy = [...cart];\n        cartCopy.splice(index, 1);\n        return cartCopy;\n      });\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"wrapper\">\n        <ShopHeader />\n        <Nav activeTab={activeTab}\n          onTabChange={setActiveTab} />\n        <div className=\"main-content\">\n          <Content tab={activeTab} onAddToCart={addToCart} onRemoveItem={removeItem} cart={summariseCart(cart)} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}